% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NestRRR.r
\name{NRRR.est}
\alias{NRRR.est}
\title{Multivariate functional regression via nested reduced-rank regularization with given ranks}
\usage{
NRRR.est(Y, X, Ag0 = NULL, Bg0 = NULL,
         rini, r, rx, ry, jx, jy, p, d, n,
         maxiter = 100, conv = 1e-4,
         method = c("RRR", "RRS")[1], lambda = 0)
}
\arguments{
\item{Y}{response matrix of dimension n-by-jy*d.}

\item{X}{design matrix of dimension n-by-jx*p.}

\item{Ag0}{an initial estimator of matrix U. If NULL then generate it
by \code{\link{NRRR.ini}}. Default is NULL.}

\item{Bg0}{an initial estimator of matrix V, if NULL then generate it
by \code{\link{NRRR.ini}}. Default is NULL.}

\item{rini, r}{a positive integer. They are the rank of the local reduced-rank structure. \code{rini} is used
in \code{\link{NRRR.ini}} to get the initial
estimators of U and V.}

\item{rx}{a positive integer and is the number of latent predictors.}

\item{ry}{a positive integer and is the number of latent responses.}

\item{jx}{a positive integer and is the number of basis functions to expand the functional predictor.}

\item{jy}{a positive integer and is the number of basis functions to expand the functional response.}

\item{p}{the number of predictors.}

\item{d}{the number of responses.}

\item{n}{sample size.}

\item{maxiter}{the maximum iteration number of the
blockwise coordinate descent algorithm. Default is 100.}

\item{conv}{the tolerance level used to control the convergence of the
blockwise coordinate descent algorithm. Default is 1e-4.}

\item{method}{'RRR' (default): no additional ridge penalty; 'RRS': add an
additional ridge penalty.}

\item{lambda}{the tuning parameter to control the amount of ridge
penalization. It is only used when \code{method = 'RRS'}.
Default is 0.}
}
\value{
The function returns a list:
  \item{Ag}{the estimated U.}
  \item{Bg}{the estimated V.}
  \item{Al}{the estimated A.}
  \item{Bl}{the estimated B.}
  \item{C}{the estimated coefficient matrix C.}
  \item{df}{degrees of freedom of the model.}
  \item{sse}{the sum of squared errors.}
  \item{ic}{a vector containing values of BIC, BICP, AIC, GCV.}
  \item{iter}{the number of iterations to converge.}
}
\description{
This function implements the blockwise coordinate descent algorithm
to get the nested reduced-rank regression estimator with
given rank values \code{(r, rx, ry)}.
}
\details{
The \emph{nested reduced-rank regression (NRRR)} is proposed to solve
a multivariate functional linear regression problem where both the response and
predictor are multivariate and functional (i.e., \eqn{Y(t)=(y_1(t),...,y_d(t))^T}
and \eqn{X(s)=(x_1(s),...,y_p(s))^T}). To control the complexity of the
problem, NRRR imposes a nested reduced-rank structure on the regression
surface \eqn{C(s,t)}. Specifically, a global dimension reduction makes use of the
correlation within the components of multivariate response and multivariate
predictor. Matrices U (d-by-ry) and V (p-by-rx) provide weights to form ry latent
functional responses and rx latent functional predictors, respectively.
Dimension reduction is achieved
once \eqn{ry < d} or \eqn{rx < p}. Then, a local dimension reduction is
conducted by restricting the latent regression surface \eqn{C^*(s,t)} to be of low-rank.
After basis expansion and truncation, also by applying proper rearrangement to
columns and rows of the resulting data matrices and coefficient matrices, we
have the nested reduced-rank problem:
\deqn{ \min_{C} || Y - XC ||_F^2, s.t., C = (I_{jx} \otimes V) BA^T (I_{jy} \otimes U)^T,}
where \eqn{BA^T} is a full-rank decomposition to control the local
rank and \eqn{jx, jy} are the number of basis functions. Beyond the functional
setup, this structure can also be applied to multiple scenarios, including
multivariate time series autoregression analysis and tensor-on-tensor regression.
This problem is non-convex and has no explicit solution, thus we use a
blockwise coordinate descent algorithm to find a local solution.
}
\examples{
library(NRRR)
simDat <- NRRR.sim(
  n = 100, ns = 200, nt = 200, r = 5, rx = 3, ry = 3,
  jx = 15, jy = 15, p = 10, d = 6, s2n = 1, rho_X = 0.5,
  rho_E = 0, Sigma = "CorrAR"
)
fit_init <- with(simDat, NRRR.est(
  Y = Yest, X = Xest, Ag0 = NULL, Bg0 = NULL,
  rini = 5, r = 5,
  rx = 3, ry = 3, jx = 15, jy = 15, p = 10, d = 6, n = 100
))
fit_init$Ag
}
\references{
Liu, X., Ma, S., & Chen, K. (2020).
Multivariate Functional Regression via Nested Reduced-Rank Regularization.
arXiv: Methodology.
}
